export class AsnParser {
    static decodeECPrivateKey(pkcs8pem, label = "EC PRIVATE KEY") {
        return AsnParser.extractNestedKeys(AsnParser.ECPrivASN.decode(pkcs8pem, "pem", {
            label: label,
            partial: true
        }).result);
    }
    static encodeECPrivateKey(key, label = "EC PRIVATE KEY") {
        return AsnParser.ECPrivLiteASN.encode({
            version: 1,
            privateKey: Buffer.from(key, "hex")
        }, "pem", {
            label: label,
            partial: true
        });
    }
    static decodeECPublicKey(pkcs8pem, label = "PUBLIC KEY") {
        return AsnParser.extractNestedKeys(AsnParser.ECPubASN.decode(pkcs8pem, "pem", {
            label: label,
            partial: true
        }).result, "publicKey");
    }
    static encodeECPublicKey(key, label = "PUBLIC KEY") {
        return AsnParser.ECPubASN.encode({
            algorithm: {
                id: [1, 2, 840, 10045, 2, 1],
                curve: [1, 3, 132, 0, 10]
            },
            publicKey: {
                unused: 0,
                data: new Buffer(key, "hex")
            }
        }, "pem", {
            label: label,
            partial: true
        });
    }
    static extractNestedKeys(asn, type = "privateKey") {
        if (asn[type]) {
            if (asn[type].data) {
                return asn[type].data.toString("hex");
            }
            else {
                return asn[type].toString("hex");
            }
        }
        else {
            if (asn.ECNested) {
                return AsnParser.extractNestedKeys(asn.ECNested, type);
            }
            else {
                throw new Error("PPK not found inside ASN");
            }
        }
    }
}
AsnParser.ECPrivASN = asn1.define("ECPrivASN", function () {
    this.seq().obj(this.key("version").int(), this.key("privateKey")
        .octstr()
        .optional(), this.seq()
        .optional()
        .obj(), this.key("ECNested")
        .octstr()
        .optional()
        .contains(asn1.define("ECNested", function () {
        this.seq().obj(this.key("version").int(), this.key("privateKey").octstr());
    })));
});
AsnParser.ECPrivLiteASN = asn1.define("ECPrivASN", function () {
    this.seq().obj(this.key("version").int(), this.key("privateKey")
        .octstr()
        .optional());
});
AsnParser.ECPubASN = asn1.define("ECPubASN", function () {
    this.seq().obj(this.key("algorithm")
        .optional()
        .seq()
        .obj(this.key("id").objid(), this.key("curve").objid()), this.key("publicKey").bitstr());
});
//# sourceMappingURL=asn.js.map